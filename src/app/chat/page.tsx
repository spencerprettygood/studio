
"use client";

import { useState, useEffect, useRef, FormEvent } from 'react';
import { conversationalChat, type ConversationalChatOutput } from '@/ai/flows/conversational-chat-flow';
import { Loader2, ArrowRight } from 'lucide-react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { addDoc, collection, Timestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { useToast } from '@/hooks/use-toast';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  isFresh?: boolean;
}

export default function ChatPage() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const savePromptMutation = useMutation({
    mutationFn: async (promptData: ConversationalChatOutput['promptToSaveData']) => {
      if (!promptData) throw new Error("Prompt data is missing.");
      
      const newPrompt = {
        name: promptData.name,
        description: promptData.description || `Generated by roFl on ${new Date().toLocaleDateString()}`,
        template: promptData.template,
        tags: promptData.tags || [],
        category: promptData.category || 'Uncategorized',
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now(),
      };
      await addDoc(collection(db, "prompts"), newPrompt);
      return newPrompt;
    },
    onSuccess: (newPrompt) => {
      queryClient.invalidateQueries({ queryKey: ['prompts'] });
      const successMessage: ChatMessage = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: `Okay, I've saved "${newPrompt.name}" to your library. You can view it on the dashboard or ask me to list your prompts.`,
        isFresh: true,
      };
      setMessages(prev => [...prev, successMessage]);
      toast({
        title: "Prompt Saved!",
        description: `"${newPrompt.name}" has been added to your library.`,
      });
    },
    onError: (error) => {
      console.error("Error saving prompt from chat:", error);
      const errorMessage: ChatMessage = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: "I had trouble saving that prompt to your library. Please try again.",
        isFresh: true,
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  });


  useEffect(() => {
    setMessages([
      {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: "I'm roFl. Your AI prompt engineering partner. What are we creating today?",
        isFresh: true,
      }
    ]);
  }, []);
  
  useEffect(() => {
    if (!isLoading) {
      inputRef.current?.focus();
    }
  }, [isLoading]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading || savePromptMutation.isPending) return;

    const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      const result: ConversationalChatOutput = await conversationalChat({ userInput: currentInput });
      const aiMessage: ChatMessage = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: result.aiResponse,
        isFresh: true,
      };
      setMessages(prev => [...prev, aiMessage]);

      // Handle the AI's request to save the prompt
      if (result.action === 'request_save_confirmation' && result.promptToSaveData) {
        savePromptMutation.mutate(result.promptToSaveData);
      }

    } catch (error) {
      console.error("Error in conversational chat:", error);
      const errorMessage: ChatMessage = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: "My circuits seem to be crossed. Please try that again in a moment.",
        isFresh: true,
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const latestAiMessage = messages.filter(m => m.role === 'assistant').pop();
  const currentLoadingState = isLoading || savePromptMutation.isPending;

  return (
    <div className="flex flex-col h-screen">
      <div className="flex-1 w-full max-w-2xl mx-auto flex flex-col justify-center items-center px-4">
        {/* Messages display */}
        <div className="w-full text-center">
            <div 
              key={latestAiMessage?.id} 
              className={`text-2xl md:text-4xl font-light text-foreground/90 leading-tight transition-opacity duration-500 ${latestAiMessage?.isFresh ? 'animate-fadeIn' : 'opacity-100'}`}
              onAnimationEnd={() => {
                if (latestAiMessage) {
                  setMessages(msgs => msgs.map(m => m.id === latestAiMessage.id ? {...m, isFresh: false} : m));
                }
              }}
            >
              {latestAiMessage?.content}
            </div>
        </div>
      </div>

      {/* Input Form at the bottom */}
      <div className="w-full max-w-2xl mx-auto px-4 pb-8">
        <form onSubmit={handleSubmit} className="relative border-t border-border/20 pt-4">
          <input
            ref={inputRef}
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder={currentLoadingState ? "roFl is thinking..." : "Type here or paste a block of text..."}
            className="w-full bg-transparent text-2xl md:text-3xl text-center placeholder:text-muted-foreground/50 focus:outline-none py-2 font-light"
            disabled={currentLoadingState}
          />
          <button 
            type="submit" 
            className="absolute right-0 top-1/2 -translate-y-1/2 mt-2 text-muted-foreground hover:text-foreground transition-colors disabled:opacity-50"
            disabled={currentLoadingState || !input.trim()}
            aria-label="Send message"
          >
            {currentLoadingState ? <Loader2 className="h-6 w-6 animate-spin" /> : <ArrowRight className="h-6 w-6" />}
          </button>
        </form>
      </div>
    </div>
  );
}
